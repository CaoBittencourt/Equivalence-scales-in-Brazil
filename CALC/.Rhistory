# 1. PACOTES --------------------------------------------------------------
# Pacotes
c(
'openxlsx', 'rio', 'plyr', 'glue', 'broom', 'tidyverse', #Leitura e manipulação de dados
'huxtable', 'stargazer', 'gtsummary' #Tabelas de regressão bonitas
) -> pkg
lapply(pkg, function(x)
if(!require(x, character.only = T))
{install.packages(x); require(x)})
# Citação dos pacotes
# lapply(pkg, function(x)
#   {citation(package = x)})
# Confecção própria
source('C:/Users/Sony/Documents/GitHub/TCC/CALC/DADOS.R', encoding = 'UTF-8')
source('C:/Users/Sony/Documents/GitHub/TCC/FUNC_CALC/SELEC_AMOSTRAL.R', encoding = 'UTF-8')
source('C:/Users/Sony/Documents/GitHub/TCC/FUNC_CALC/ENGEL_ROTHBARTH.R', encoding = 'UTF-8')
# #                                 names(models.var[[country]]$varresult[2])),
# #               dep.var.labels = '',
# #               model.numbers = F,
# #               align = T) -> model.stargazer
#
#
# # cat(file = 'Engel_pof_2002_ss.docx',
# # append = T)
# lista.pof2002_cs$pof_ac_2002_cs %>%
#   modelr::bootstrap(100)
basepadrao.pof2002 %>% View(.)
moradia.pof2002 %>% glimpse(.)
individuos.pof2002 %>% glimpse(.)
# #                                 names(models.var[[country]]$varresult[2])),
# #               dep.var.labels = '',
# #               model.numbers = F,
# #               align = T) -> model.stargazer
#
#
# # cat(file = 'Engel_pof_2002_ss.docx',
# # append = T)
# lista.pof2002_cs$pof_ac_2002_cs %>%
#   modelr::bootstrap(100)
basepadrao.pof2002 %>% View(.)
# 2. PESSOAS DE REFERÊNCIA ------------------------------------------------
# Pessoas de referência
ref_ac_2002_ss <- '`(14,110] anos`'
# ref_normais_2002_ss <- '`(18,65] anos`'
ref_vaz_2002_ss <- '`(14,110] anos`'
ref_deaton_2002_ss <- '`(14,54] anos`'
ref_ac_2002_cs <- '`Homens_(14,110]`'
# ref_normais_2002_cs <- '`Homens_(18,65]`'
ref_vaz_2002_cs <- '`Homens_(14,110]`'
ref_deaton_2002_cs <- '`Homens_(14,54]`'
ref_ac_2008_ss <- '`(14,104] anos`'
# ref_normais_2008_ss <- '`(18,65] anos`'
ref_vaz_2008_ss <- '`(14,104] anos`'
ref_deaton_2008_ss <- '`(14,54] anos`'
ref_ac_2008_cs <- '`Homens_(14,104]`'
# ref_normais_2008_cs <- '`Homens_(18,65]`'
ref_vaz_2008_cs <- '`Homens_(14,104]`'
ref_deaton_2008_cs <- '`Homens_(14,54]`'
lista.ref_2002_ss <- list(ref_ac_2002_ss, ref_vaz_2002_ss, ref_deaton_2002_ss)
lista.ref_2002_cs <- list(ref_ac_2002_cs, ref_vaz_2002_cs, ref_deaton_2002_cs)
lista.ref_2008_ss <- list(ref_ac_2008_ss, ref_vaz_2008_ss, ref_deaton_2008_ss)
lista.ref_2008_cs <- list(ref_ac_2008_cs, ref_vaz_2008_cs, ref_deaton_2008_cs)
# 3. VARIÁVEIS DE CONTROLE ------------------------------------------------
# POF2002
lista.pof2002_ss$pof_ac_2002_ss %>%
select(
contains('control'),
-contains('Não tem'),
-contains('_cor.'),
-contains('chefe_idade'),
-contains('Não empregado'),
# control.chefe_idade,
share_despesas.mensais.imoveis.aquisicao,
share_despesas.mensais.imoveis.prestacao,
share_despesas.mensais.imoveis.reforma,
UF_sigla,
urbano
) %>%
names(.) %>%
{glue('`{.}`')} -> control_pof2002
# POF2008
lista.pof2008_ss$pof_ac_2008_ss %>%
select(
contains('control'),
-contains('Não tem'),
-contains('_cor.'),
-contains('chefe_idade'),
-contains('Não empregado'),
# control.chefe_idade_anos,
share_despesas.mensais.imoveis.aquisicao,
share_despesas.mensais.imoveis.prestacao,
share_despesas.mensais.imoveis.reforma,
UF_sigla,
urbano
) %>%
names(.) %>%
{glue('`{.}`')} -> control_pof2008
# 4. OUTROS ARGUMENTOS DO MODELO ------------------------------------------------
# POF2002
engel.welfare.indicator_pof2002 <- 'share_despesas.mensais.alimentacao' #Para o método de Engel, o bem-estar é inferido da participação orçamentária de comida
expenditure_pof2002 <- 'despesas.mensais.totais_per.capita' #Dispêndio per capita
iv.expenditure_pof2002 <- 'renda_per.capita' #Variável instrumental do dispêndio = renda
weights.var_pof2002 <- 'fator' #Peso amostral
# POF2008
engel.welfare.indicator_pof2008 <- 'share_despesas.mensais.alimentacao' #Para o método de Engel, o bem-estar é inferido da participação orçamentária de comida
expenditure_pof2008 <- 'despesas.mensais.totais_per.capita' #Dispêndio per capita
iv.expenditure_pof2008 <- 'renda_total_per.capita' #Variável instrumental do dispêndio = renda
weights.var_pof2008 <- 'fator_expansao1' #Peso amostral
# Quantidade de crianças para cálculo de escalas de equivalência
n.child.range <- seq(1,3)
# 7. SELEÇÃO AMOSTRAL (VAZ & VAZ, 2007) ------------------------------------------------------------
# POF2002
# Sem sexo
lapply(
lista.pof2002_ss,
function(pof){
pof %>%
filter(
!!sym(engel.welfare.indicator_pof2002) > 0,
!!sym(expenditure_pof2002) > 0,
!!sym(iv.expenditure_pof2002) > 0
) %>%
sample.selection( # Seleção amostral VAZ & VAZ (2007)
incluir_solteiros_sem.filhos = F,
incluir_solteiros_com.filhos = F,
var.chefe_idade = 'control.chefe_idade',
max_idade_chefe = 69,
min_idade_chefe = 18,
qtd_morador = qtd_moradores_pof2002,
max_moradores = 8,
max_filhos = 6,
max_outros.parentes = 6,
max_agregados = 0,
max_pensionistas = 0,
max_empregados = 0,
max_parentes.empregados = 0
) -> pof.temp
# assign(x = glue('{pof.name}.engle.sample'),
#        value = pof.temp,
#        envir = .GlobalEnv)
}
) -> lista.pof2002_ss.engle.sample
# Com sexo
lapply(
lista.pof2002_cs,
function(pof){
pof %>%
filter(
!!sym(engel.welfare.indicator_pof2002) > 0,
!!sym(expenditure_pof2002) > 0,
!!sym(iv.expenditure_pof2002) > 0
) %>%
sample.selection( # Seleção amostral VAZ & VAZ (2007)
incluir_solteiros_sem.filhos = F,
incluir_solteiros_com.filhos = F,
var.chefe_idade = 'control.chefe_idade',
max_idade_chefe = 69,
min_idade_chefe = 18,
qtd_morador = qtd_moradores_pof2002,
max_moradores = 8,
max_filhos = 6,
max_outros.parentes = 6,
max_agregados = 0,
max_pensionistas = 0,
max_empregados = 0,
max_parentes.empregados = 0
) -> pof.temp
# assign(x = glue('{pof.name}.engle.sample'),
#        value = pof.temp,
#        envir = .GlobalEnv)
}
) -> lista.pof2002_cs.engle.sample
# POF2008
# Sem sexo
lapply(
lista.pof2008_ss,
function(pof){
pof %>%
filter(
!!sym(engel.welfare.indicator_pof2008) > 0,
!!sym(expenditure_pof2008) > 0,
!!sym(iv.expenditure_pof2008) > 0
) %>%
sample.selection( # Seleção amostral VAZ & VAZ (2007)
incluir_solteiros_sem.filhos = F,
incluir_solteiros_com.filhos = F,
var.chefe_idade = 'control.chefe_idade_anos',
max_idade_chefe = 69,
min_idade_chefe = 18,
qtd_morador = qtd_moradores_pof2008,
max_moradores = 8,
max_filhos = 6,
max_outros.parentes = 6,
max_agregados = 0,
max_pensionistas = 0,
max_empregados = 0,
max_parentes.empregados = 0
) -> pof.temp
# assign(x = glue('{pof.name}.engle.sample'),
#        value = pof.temp,
#        envir = .GlobalEnv)
}
) -> lista.pof2008_ss.engle.sample
# Com sexo
lapply(
lista.pof2008_cs,
function(pof){
pof %>%
filter(
!!sym(engel.welfare.indicator_pof2008) > 0,
!!sym(expenditure_pof2008) > 0,
!!sym(iv.expenditure_pof2008) > 0
) %>%
sample.selection( # Seleção amostral VAZ & VAZ (2007)
incluir_solteiros_sem.filhos = F,
incluir_solteiros_com.filhos = F,
var.chefe_idade = 'control.chefe_idade_anos',
max_idade_chefe = 69,
min_idade_chefe = 18,
qtd_morador = qtd_moradores_pof2008,
max_moradores = 8,
max_filhos = 6,
max_outros.parentes = 6,
max_agregados = 0,
max_pensionistas = 0,
max_empregados = 0,
max_parentes.empregados = 0
) -> pof.temp
# assign(x = glue('{pof.name}.engle.sample'),
#        value = pof.temp,
#        envir = .GlobalEnv)
}
) -> lista.pof2008_cs.engle.sample
# 9. ESCALAS DE EQUIVALÊNCIA: POF 2002, todas as faixas etárias, sem sexo ------------------------------------------------------------
# POF2002, todas as faixas etárias, sem sexo
# Modelos 2SLS (para output de tabelas)
Map(
pof = lista.pof2002_ss.engle.sample,
pessoa_ref = lista.ref_2002_ss,
function(pof, pessoa_ref){
pof %>%
iv.engel.rothbarth.econ_scale(
# # iv.engel.rothbarth(
welfare.indicator = engel.welfare.indicator_pof2002,
expenditure = expenditure_pof2002,
iv.expenditure = iv.expenditure_pof2002,
qtd_morador = qtd_moradores_pof2002,
control = control_pof2002,
weights = T,
weights.var = weights.var_pof2002,
show.diagnostics = F
) %>% return(.)
}
) -> lista.pof2002_ss.engle.sample.ivreg
# Erros robustos (para output de tabelas)
lapply(
lista.pof2002_ss.engle.sample.ivreg,
function(model){
model %>%
robust_std.errors(.type = 'HC1')
}
) -> lista.pof2002_ss.engle.sample.str_errors.robust
# Modelos robustos (para cálculos)
lapply(
lista.pof2002_ss.engle.sample.ivreg,
function(model){
model %>%
fix.heteroskedasticity(.type = 'HC1')
}
) -> lista.pof2002_ss.engle.sample.ivreg.robust
# Escalas de equivalência
Map(
iv.engel.model = lista.pof2002_ss.engle.sample.ivreg.robust,
sample = names(lista.pof2002_ss.engle.sample.ivreg.robust),
pessoa_ref = lista.ref_2002_ss,
function(
iv.engel.model,
sample,
pessoa_ref,
n.child = n.child.range
){
lapply(
n.child,
function(n){
equivalence.scales.engel.rothbarth(
model = iv.engel.model,
pessoa.referencia = pessoa_ref,
na.h = 2, nc.h = n,
na.r = 2, nc.r = 0
) %>%
mutate(
family.comparison = glue('AA vs AA', strrep('C',n)),
data = sample
)
}
) %>% bind_rows(.)
}
) %>% bind_rows(.) -> pof2002_ss.engle_scales
# Escalas de equivalência
Map(
iv.engel.model = lista.pof2002_ss.engle.sample.ivreg.robust,
sample = names(lista.pof2002_ss.engle.sample.ivreg.robust),
pessoa_ref = lista.ref_2002_ss,
function(
iv.engel.model,
sample,
pessoa_ref,
n.child = n.child.range
){
lapply(
n.child,
function(n){
equivalence.scales.engel.rothbarth(
model = iv.engel.model,
pessoa.referencia = pessoa_ref,
na.h = 2, nc.h = n,
na.r = 1, nc.r = 0
) %>%
mutate(
family.comparison = glue('AA vs AA', strrep('C',n)),
data = sample
)
}
) %>% bind_rows(.)
}
) %>% bind_rows(.) -> pof2002_ss.engle_scales2
pof2002_ss.engle_scales %>%
filter(family.comparison == 'AA vs AAC')
pof2002_ss.engle_scales
pof2002_ss.engle_scales2
pof2002_ss.engle_scales %>%
select(-std.error,
-$p.value,
-$`p.value<=0.05`,
-$data)
pof2002_ss.engle_scales %>%
select(-std.error,
-p.value,
-`p.value<=0.05`,
-data)
pof2002_ss.engle_scales2 %>%
select(-std.error,
-p.value,
-`p.value<=0.05`,
-data)
pof2002_ss.engle_scales %>%
select(-std.error,
-p.value,
-`p.value<=0.05`,
-data)
pof2002_ss.engle_scales2 %>%
select(-std.error,
-p.value,
-`p.value<=0.05`,
-data) -> dsds
n.child.range <- seq(0,3)
n.child.range
# Escalas de equivalência
Map(
iv.engel.model = lista.pof2002_ss.engle.sample.ivreg.robust,
sample = names(lista.pof2002_ss.engle.sample.ivreg.robust),
pessoa_ref = lista.ref_2002_ss,
function(
iv.engel.model,
sample,
pessoa_ref,
n.child = n.child.range
){
lapply(
n.child,
function(n){
equivalence.scales.engel.rothbarth(
model = iv.engel.model,
pessoa.referencia = pessoa_ref,
na.h = 2, nc.h = n,
na.r = 2, nc.r = 0
) %>%
mutate(
family.comparison = glue('AA vs AA', strrep('C',n)),
data = sample
)
}
) %>% bind_rows(.)
}
) %>% bind_rows(.) -> pof2002_ss.engle_scales
pof2002_ss.engle_scales
# Escalas de equivalência
Map(
iv.engel.model = lista.pof2002_ss.engle.sample.ivreg.robust,
sample = names(lista.pof2002_ss.engle.sample.ivreg.robust),
pessoa_ref = lista.ref_2002_ss,
function(
iv.engel.model,
sample,
pessoa_ref,
n.child = n.child.range
){
lapply(
n.child,
function(n){
equivalence.scales.engel.rothbarth(
model = iv.engel.model,
pessoa.referencia = pessoa_ref,
na.h = 2, nc.h = n,
na.r = 2, nc.r = 0
) %>%
mutate(
family.comparison = glue('AA vs AA', strrep('C',n)),
data = sample
)
}
) %>% bind_rows(.)
}
) %>% bind_rows(.) -> pof2002_ss.engle_scales2
pof2002_ss.engle_scales %>%
select(-std.error,
-p.value,
-`p.value<=0.05`,
-data)
pof2002_ss.engle_scales2 %>%
select(-std.error,
-p.value,
-`p.value<=0.05`,
-data) -> dsds
pof2002_ss.engle_scales2 %>%
select(-std.error,
-p.value,
-`p.value<=0.05`,
-data)
# Escalas de equivalência
Map(
iv.engel.model = lista.pof2002_ss.engle.sample.ivreg.robust,
sample = names(lista.pof2002_ss.engle.sample.ivreg.robust),
pessoa_ref = lista.ref_2002_ss,
function(
iv.engel.model,
sample,
pessoa_ref,
n.child = n.child.range
){
lapply(
n.child,
function(n){
equivalence.scales.engel.rothbarth(
model = iv.engel.model,
pessoa.referencia = pessoa_ref,
na.h = 2, nc.h = n,
na.r = 1, nc.r = 0
) %>%
mutate(
family.comparison = glue('AA vs AA', strrep('C',n)),
data = sample
)
}
) %>% bind_rows(.)
}
) %>% bind_rows(.) -> pof2002_ss.engle_scales2
pof2002_ss.engle_scales2 %>%
select(-std.error,
-p.value,
-`p.value<=0.05`,
-data)
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(4)/first(.)
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(4)/1.86
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(4)/head(1)
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(1)
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(4)/head(1)
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(4) %>%
. / first(.)
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(1) -> lalala
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(4)/lalala
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(1) %>%
pull(.) -> lalala
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(4)/lalala
pof2002_ss.engle_scales %>%
select(-std.error,
-p.value,
-`p.value<=0.05`,
-data) %>%
head(4)
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(4)/lalala
pof2002_ss.engle_scales %>%
select(-std.error,
-p.value,
-`p.value<=0.05`,
-data)
pof2002_ss.engle_scales$equivalence.scale %>% head(4)
pof2002_ss.engle_scales2 %>%
select(equivalence.scale) %>%
head(4)/lalala
